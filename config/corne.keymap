/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>


#define KCEDIL &kp RA(COMMA)

#define MLEFT &mmv MOVE_LEFT
#define MDOWN &mmv MOVE_DOWN
#define MUP &mmv MOVE_UP
#define MRIGHT &mmv MOVE_RIGHT
#define MSDOWN &msc SCRL_DOWN
#define MSUP &msc SCRL_UP

#define SDOWN &kp C_VOL_DN
#define SUP &kp C_VOL_UP
#define SMUTE &kp C_MUTE


/ {
    behaviors {
        mt: mod_tap {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            display-name = "Mod-Tap";
        };
        // Home-row mods
        hra: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt LGUI A>, <&kp A>;
        };
        hrs: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt LALT S>, <&kp S>;
        };
        hrd: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt LCTRL D>, <&kp D>;
        };
        hrf: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt LSHIFT F>, <&kp F>;
        };
        hrj: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RSHIFT J>, <&kp J>;
        };
        hrk: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RCTRL K>, <&kp K>;
        };
        hrl: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt LALT L>, <&kp L>;
        };
        hrsc: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&mt RGUI SEMI>, <&kp SEMI>;
        };
        // Change Layers
        lmo: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 1 ESC>, <&kp ESC>;
        };
        lnu: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 2 SPACE>, <&kp SPACE>;
        };
        lmv: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 3 TAB>, <&kp TAB>;
        };
        lsy: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 4 RET>, <&kp RET>;
        };
        lac: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 5 BSPC>, <&kp BSPC>;
        };
        lfn: tap_dance_mod_tap {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&lt 6 DEL>, <&kp DEL>;
        };
    };
    combos {
        compatible = "zmk,combos";
        combo_caps {
            timeout-ms = <50>;
            key-positions = <16 19>;
            bindings = <&caps_word>;
        };
        combo_esc {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp ESC>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
   &none &kp Q      &kp W       &kp E       &kp R       &kp T       &kp Y       &kp U       &kp I       &kp O       &kp P       &none
   &none &hra       &hrs        &hrd        &hrf        &kp G       &kp H       &hrj        &hrk        &hrl        &hrsc       &none
   &none &kp Z      &kp X       &kp C       &kp V       &kp B       &kp N       &kp M       &kp COMMA   &kp DOT     &kp FSLH    &none
                                &lmo        &lnu        &lmv        &lsy        &lac        &lfn
            >;
        };
        mod_layer {
            bindings = <
   &trans &trans    &trans     &trans       &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
   &trans &trans    &trans     &trans       &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
   &trans &trans    &trans     &trans       &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
                               &trans       &trans      &trans      &trans      &trans      &trans
            >;
        };
        number_layer {
            bindings = <
   &trans &trans    &trans     &trans       &trans      &trans      &kp PLUS    &kp KP_N7   &kp KP_N8   &kp KP_N9   &kp STAR    &trans
   &trans &trans    &trans     &trans       &trans      &trans      &kp MINUS   &kp KP_N4   &kp KP_N5   &kp KP_N6   &kp EQUAL   &trans
   &trans &trans    &trans     &trans       &trans      &trans      &kp UNDER   &kp KP_N1   &kp KP_N2   &kp KP_N3   &kp SLASH   &trans
                               &trans       &trans      &trans      &kp COMMA   &kp KP_N0   &kp DOT
            >;
        };
        move_layer {
            bindings = <
   &trans &trans    &trans     &trans       &trans      &trans      MLEFT       MDOWN       MUP         MRIGHT      &trans      &trans
   &trans &trans    &trans     &trans       &trans      &trans      &kp LEFT    &kp DOWN    &kp UP      &kp RIGHT   MSUP       &trans
   &trans &trans    &trans     &trans       &trans      &trans      &kp HOME    &kp PG_DN   &kp PG_UP   &kp END     MSDOWN     &trans
                               &trans       &trans      &trans      &mkp LCLK   &mkp MCLK   &mkp RCLK
            >;
        };
        symbol_layer {
            bindings = <
   &trans &kp EXCL  &kp AT     &kp HASH     &kp DLLR    &kp PRCNT   &trans      &trans      &trans      &trans      &trans      &trans
   &trans &kp AMPS  &kp LT     &kp GT       &kp LPAR    &kp RPAR    &trans      &trans      &trans      &trans      &trans      &trans
   &trans &kp BSLH  &kp LBKT   &kp LBRC     &kp LBKT    &kp LBRC    &trans      &trans      &trans      &trans      &trans      &trans
                               &kp COLON    &kp MINUS   &kp EQUAL   &trans      &trans      &trans
            >;
        };
        accent_layer {
            bindings = <
   &trans &trans    &kp CARET  &trans       &kp GRAVE   &trans      &trans      &trans      &trans      &trans      &trans      &trans
   &trans &trans    &kp TILDE  &kp DQT      &kp SQT     &trans      &trans      &trans      &trans      &trans      &trans      &trans
   &trans &trans    &trans     KCEDIL       &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
                               &trans       &trans      &trans      &trans      &trans      &trans
            >;
        };
        function_layer {
            bindings = <
   &trans &kp F1    &kp F2     &kp F3       &kp F4      &kp INS     &trans      SDOWN       SUP         SMUTE       &trans      &trans
   &trans &kp F5    &kp F6     &kp F7       &kp F8      &caps_word  &trans      &trans      &trans      &trans      &trans      &trans
   &trans &kp F9    &kp F10    &kp F11      &kp F12     &kp CAPS    &trans      &bt BT_NXT  &bt BT_PRV  &bt BT_CLR  &bt BT_DISC &trans
                               &kp KP_NUM   &trans      &trans      &trans      &trans      &trans
            >;
        };
        cp_layer {
            bindings = <
   &trans &trans    &trans     &trans       &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
   &trans &trans    &trans     &trans       &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
   &trans &trans    &trans     &trans       &trans      &trans      &trans      &trans      &trans      &trans      &trans      &trans
                               &trans       &trans      &trans      &trans      &trans      &trans
            >;
        };
    };
};
